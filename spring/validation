API 개발시에 request로 받아온 data를 validation하기 위해서는
validator 라이브러리를 추가 한 뒤에,
@Valid 또는 @Validated 를 사용하면 됩니다.

코드로 예시를 들자면,

@RequesetMapping("...")
public ResponseEntity exMethod(@RequestBody @Valid Data data, BindingResult bindingResult){
...
}

이런 식으로 작성하면 Data 객체에서 설정한 검증들이 컨트롤러 호출시 실행이 되고, 검증에 실패시 BindingResult에 에러 정보를 담는다고 배웠습니다.

Data 객체에서 데이터 유효성 처리를 하는 방법을 코드로 살펴보자면, 

public class Data {
  @NotEmpty
  private String username;
  
  @NotEmpty
  private String password;
}

이런 형태로 @NotEmpty 뿐만 아니라 다른 어노테이션도 존재하고 사용법도 어렵지 않습니다.
위에서 검증에 실패시 BindingResult에 담긴다고 했으니

if(bindingResult.hasErrors()){
  ...
}

위 코드를 통해 error가 담겼을 때의 로직을 구현하면 됩니다.

기본적인 validation은 위와 같은데, 
보통 request로 data를 받을 때는 Entity에 직접 담지 않고 DTO를 만들어서 받습니다.
그 DTO안에 객체 타입의 필드가 있다면 validation을 어떻게 하는지 궁금해서 찾아봤습니다.

바로 코드로 예시를 보이자면, 

public class RequestData{
  @NotNull
  private String username;

  @NotNull
  private List<SubData> subDatas;
}

public class SubData{
  @NotNull
  private String type;
}

위와 같이 객체 내에 List타입의 필드가 있다고 한다면 우리의 의도는 SubData 에 설정한 유효성 검증도 실행되게 하는 것입니다.
하지만 위에 처럼 코드를 작성한다면 SubData의 필드는 검증에 포함되지 않습니다. 
다른 처리를 하나 해줘야 하는데 아주 간단합니다.

List타입의 서브 클래스의 유효성까지 체크하고 싶다면,

public class RequsetData{
  @NotNull
  private String username;
  
  @Valid
  @NotNull
  private List<SubData> subDatas;
}

위에 코드처럼 List로 받는 서브클래스 필드 위에 @Valid 를 추가하면 됩니다.
